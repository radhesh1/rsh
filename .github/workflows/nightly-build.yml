# REF:
#   1. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
#   2. https://github.com/JasonEtco/create-an-issue
#   3. https://docs.github.com/en/actions/learn-github-actions/variables
#   4. https://github.com/actions/github-script
name: Nightly Build

on:
  push:
    branches:
      - nightly   # Just for test purpose only with the nightly repo
  # This schedule will run only from the default branch
  schedule:
    - cron: '15 0 * * *' # run at 00:15 AM UTC

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: github.repository == 'rsh/nightly'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup rsh
        uses: hustcer/setup-nu@v3.8
        with:
          version: 0.86.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare for Nightly Release
        run: |
          cd $GITHUB_WORKSPACE
          git checkout main
          git config user.name 'hustcer'
          git config user.email 'hustcer@outlook.com'
          git pull origin main
          git remote add src https://github.com/radhesh1/rsh.git
          git fetch src main
          git reset --hard src/main
          git push origin main -f
          sha_short=$(git rev-parse --short origin/main | awk '{print $1}')
          tag_name="nightly-${sha_short}"
          if ! git ls-remote --tags origin "$tag_name" &> /dev/null; then
            git tag -a "$tag_name" -m "Nightly build from $sha_short"
            git push origin --tags
          fi

  standard:
    name: Std
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - riscv64gc-unknown-linux-gnu
        extra: ['bin']
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_rustflags: ''
          # ... (repeat for other targets)
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-20.04
            target_rustflags: ''

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Update Rust Toolchain Target
        run: echo "targets = ['${{matrix.target}}']" >> rust-toolchain.toml

      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.5.0
        with:
          rustflags: ''

      - name: Setup rsh
        uses: hustcer/setup-nu@v3.8
        with:
          version: 0.86.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Rsh Binary
        id: rsh
        run: rsh .github/workflows/release-pkg.rsh
        env:
          RELEASE_TYPE: standard
          OS: ${{ matrix.os }}
          REF: ${{ github.ref }}
          TARGET: ${{ matrix.target }}
          _EXTRA_: ${{ matrix.extra }}
          TARGET_RUSTFLAGS: ${{ matrix.target_rustflags }}

      - name: Create an Issue for Release Failure
        if: failure()
        uses: JasonEtco/create-an-issue@v2.9.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          update_existing: true
          search_existing: open
          filename: .github/AUTO_ISSUE_TEMPLATE/nightly-build-fail.md

      - name: Set Outputs of Short SHA
        id: vars
        run: echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT && sha_short=$(git rev-parse --short HEAD) && echo "sha_short=${sha_short:0:7}" >> $GITHUB_OUTPUT

      - name: Publish Archive
        uses: softprops/action-gh-release@v0.1.15
        if: startsWith(github.repository, 'rsh/nightly')
        with:
          prerelease: true
          files: ${{ steps.nu.outputs.archive }}
          tag_name: nightly-${{ steps.vars.outputs.sha_short }}
          name: Rsh-nightly-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha_short }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  full:
    name: Full
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
        extra: ['bin']
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_rustflags: '--features=dataframe,extra'
          # ... (repeat for other targets)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            target_rustflags: '--features=dataframe,extra'

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Update Rust Toolchain Target
        run: echo "targets = ['${{matrix.target}}']" >> rust-toolchain.toml

      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.5.0
        with:
          rustflags: ''

      - name: Setup rsh
        uses: hustcer
